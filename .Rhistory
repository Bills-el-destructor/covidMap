puntuacion,
posterior_2005)
names(peliculas_df) = c("NOMBRE",
"PUNTUACION",
"POSTERIOR_2005")
orden_mayor_menor = order(peliculas_df$PUNTUACION,
decreasing = TRUE)
df_ordenado = peliculas_df[orden_mayor_menor,]
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
nombre = c("Shrek", "Shrek 2", "Shrek tercero", "Shrek Felices por siempre")
puntuacion = c(7.9, 7.2, 6.1, 6.3)
posterior_2005 = c(FALSE, FALSE, TRUE, TRUE)
peliculas_df = data.frame(nombre,
puntuacion,
posterior_2005)
names(peliculas_df) = c("NOMBRE",
"PUNTUACION",
"POSTERIOR_2005")
orden_mayor_menor = order(peliculas_df$PUNTUACION,
decreasing = TRUE)
df_ordenado = peliculas_df[orden_mayor_menor,]
source("~/.active-rstudio-document")
plot(df_ordenado)
df_ordenado = peliculas_df[orden_mayor_menor,]
df_ordenado = peliculas_df[orden_mayor_menor,]
print("Hola R")
df_ordenado = peliculas_df[orden_mayor_menor,]
peliculas_df -> data.frame(nombre,
puntuacion,
posterior_2005)
names(peliculas_df) = c("NOMBRE",
"PUNTUACION",
"POSTERIOR_2005")
df_ordenado = peliculas_df[orden_mayor_menor,]
df_ordenado = peliculas_df[orden_mayor_menor,]
df_ordenado = peliculas_df[orden_mayor_menor,]
df_ordenado = peliculas_df[orden_mayor_menor,]
df_ordenado = peliculas_df[orden_mayor_menor,]
posterior_2005 = c(FALSE, FALSE, TRUE, TRUE)
peliculas_df = data.frame(nombre,
puntuacion,
posterior_2005)
names(peliculas_df) = c("NOMBRE",
"PUNTUACION",
"POSTERIOR_2005")
nombre = c("Shrek", "Shrek 2", "Shrek tercero", "Shrek Felices por siempre")
puntuacion = c(7.9, 7.2, 6.1, 6.3)
peliculas_df = data.frame(nombre,
puntuacion,
posterior_2005)
names(peliculas_df) = c("NOMBRE",
"PUNTUACION",
"POSTERIOR_2005")
orden_mayor_menor = order(peliculas_df$PUNTUACION,
decreasing = TRUE)
df_ordenado = peliculas_df[orden_mayor_menor,]
nombre = c("Shrek", "Shrek 2", "Shrek tercero", "Shrek Felices por siempre")
puntuacion = c(7.9, 7.2, 6.1, 6.3)
posterior_2005 = c(FALSE, FALSE, TRUE, TRUE)
peliculas_df = data.frame(nombre,
puntuacion,
posterior_2005)
names(peliculas_df) = c("NOMBRE",
"PUNTUACION",
"POSTERIOR_2005")
orden_mayor_menor = order(peliculas_df$PUNTUACION,
decreasing = TRUE)
df_ordenado = peliculas_df[orden_mayor_menor,]
nombre = c("Shrek", "Shrek 2", "Shrek tercero", "Shrek Felices por siempre")
puntuacion = c(7.9, 7.2, 6.1, 6.3)
posterior_2005 = c(FALSE, FALSE, TRUE, TRUE)
peliculas_df = data.frame(nombre,
puntuacion,
posterior_2005)
names(peliculas_df) = c("NOMBRE",
"PUNTUACION",
"POSTERIOR_2005")
orden_mayor_menor = order(peliculas_df$PUNTUACION,
decreasing = TRUE)
df_ordenado = peliculas_df[orden_mayor_menor,]
plot(df_ordenado)
source("~/.active-rstudio-document", encoding = 'UTF-8')
print("Hola RStudio");
print("Inrgeses radio: ")
radio = scan()
radio = readline(prompt = "Ingrese radio: ")
print(pi)
radio = readline(prompt = "Ingrese radio: ")
print(pi*radio*radio*altura)
radio = readline(prompt = "Ingrese radio: ")
altura = readline(prompt = "Ingrese altura: ")
print(pi*radio*radio*altura)
print(radio*radio*altura)
radio = as.integer(readline(prompt = "Ingrese radio: "))
10
altura = as.integer(readline(prompt = "Ingrese altura: "))
print(pi*radio*radio*altura)
10
radio = as.integer(readline(prompt = "Ingrese radio: "))
altura = as.integer(readline(prompt = "Ingrese altura: "))
print(pi*radio*radio*altura)
print("El volumen del cilindro es: ", pi*radio*radio*altura)
print("El volumen del cilindro es: "+ pi*radio*radio*altura)
print("El volumen del cilindro es: "+ pi*radio*radio*altura)
print("El volumen del cilindro es: ", pi*radio*radio*altura)
print("El volumen del cilindro es: "+ pi*radio*radio*altura)
cat("El volumen del cilindro es: ", pi*radio*radio*altura)
source("~/.active-rstudio-document")
source("C:/Users/Bill/Desktop/RStudio tests/2 Volumen de un cilindro.R")
source("~/.active-rstudio-document")
cat("El precio promedio es: " + (precio1+precio2+precio3))
cat("El precio promedio es: ", (precio1+precio2+precio3))
cat("El precio promedio es: ", (precio1+precio2+precio3)/3)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("C:/Users/Bill/Desktop/RStudio tests/3 Precio promedio.R")
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("C:/Users/Bill/Desktop/RStudio tests/4 Vectores.R", encoding = 'UTF-8')
source("C:/Users/Bill/Desktop/RStudio tests/4 Vectores.R", encoding = 'UTF-8')
a()
array = c()
array
array = c(array, 1)
array = c(array, 2)
array = c(array, 3)
array = c(array, 4)
array = c(array, 5)
array = c(array, 6)
array = c(array, 7)
array = c(array, 8)
array = c(array, 9)
array = c(array, 10)
source("C:/Users/Bill/Desktop/RStudio tests/4 Vectores.R", encoding = 'UTF-8')
source("C:/Users/Bill/Desktop/RStudio tests/4 Vectores.R", encoding = 'UTF-8')
sin(1)
sin(0)
sin(pi)
sin(45)
sin(0)
sin(90)
sin(180)
sin(pi)
sin(pi/2)
sin(3*pi/2)
sin(0*pi/180)
sin(90*pi/180)
tan(90*pi/180)
sin(45*pi/180)
0.7071068*2
x
source("~/.active-rstudio-document", encoding = 'UTF-8')
x
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
install.packages("ggplot2")
help(ggplot2)
help("ggplot2")
library(ggplot2)
help("ggplot2")
install.packages("leaflet")
source("~/.active-rstudio-document")
m = leaflet() %>%
addTiles()
View(m)
View(m)
View(m)
View(m)
m
library(ggplot2)
ggplot(mpg, aes(displ, hwy)) + geom_point()
mpg
datos = mpg
View(datos)
View(datos)
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
library(ggplot2)
library(plotly)
library(plotly)
install.packages(c("cli", "colorspace", "crayon", "fansi", "glue", "magrittr", "pillar", "rlang", "withr"))
install.packages(c("cli", "colorspace", "crayon", "fansi", "glue", "magrittr", "pillar", "rlang", "withr"))
install.packages(c("cli", "colorspace", "crayon", "fansi", "glue", "magrittr", "pillar", "rlang", "withr"))
install.packages(c("cli", "colorspace", "crayon", "fansi", "glue", "magrittr", "pillar", "rlang", "withr"))
install.packages(c("cli", "colorspace", "crayon", "fansi", "glue", "magrittr", "pillar", "rlang", "withr"))
install.packages(c("cli", "colorspace", "crayon", "fansi", "glue", "magrittr", "pillar", "rlang", "withr"))
install.packages("plotly")
library(ggplot2)
library(plotly)
r version
r -version
r -v
library(plotly)
remove.packages(plotly)
remove.packages("plotly")
install.packages("plotly")
library(plotly)
install.packages("rlang")
install.packages("rlang")
remove.packages("plotly")
install.packages("plotly")
remove.packages("plotly")
r -version
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
library(shiny)
ui = fluidPage(
plotOutput("plot", click = "plot_click"),
tableOutput("data")
)
server = function(input, output)
{
output$plot = renderPlot({
plot(mtcars$wt, mtcars$mpg)},
res = 96)
output$data = renderTable({
nearPoints(mtcars, input$plot_click, xvar = "wt", yvar = "mpg")}
)
}
shinyApp(ui = ui, server = server)
distrito = c("Cabana", "Cabanillas", "Caracoto", "Juliaca", "San Miguel")
id_distrito = c(1,2,3,4,5)
polygono = ("Poligono1", "Poligono2", "Poligono3", "Poligono4", "Poligono5")
polygono = c("Poligono1", "Poligono2", "Poligono3", "Poligono4", "Poligono5")
covid = data.frame(id_distrito, distrito, polygono)
View(covid)
distrito = c("Cabana", "Cabanillas", "Caracoto", "Juliaca", "San Miguel")
id_distrito = c(1,2,3,4,5)
polygono = c("Poligono1", "Poligono2", "Poligono3", "Poligono4", "Poligono5")
covid = data.frame(id_distrito, distrito, polygono)
View(covid)
casos_Cabana = c(1,2,3,4,5,6,7)
casos_Cabanillas = c(1,3,6,9,12,15,18)
casos_Caracoto = c(1,4,8,12,16,20,24)
casos_Juliaca = c(1,2,3,5,8,13,21)
casos_San_Miguel = c(1,3,5,7,9,11,13)
covid = data.frame(id_distrito, distrito, polygono, casos_Cabana, casos_Cabanillas, casos_Caracoto, casos_Juliaca, casos_San_Miguel)
casos_Juliaca = c(casos_Cabana, casos_Cabanillas, casos_Caracoto, casos_Juliaca, casos_San_Miguel)
casos_Juliaca = c(1,2,3,5,8,13,21)
casos_San_Roman = c(casos_Cabana, casos_Cabanillas, casos_Caracoto, casos_Juliaca, casos_San_Miguel)
covid = data.frame(id_distrito, distrito, polygono, casos_San_Roman)
View(covid)
distrito = c("Cabana", "Cabanillas", "Caracoto", "Juliaca", "San Miguel")
id_distrito = c(1,2,3,4,5)
polygono = c("Poligono1", "Poligono2", "Poligono3", "Poligono4", "Poligono5")
casos_Cabana = c(1,2,3,4,5,6,7)
casos_Cabanillas = c(1,3,6,9,12,15,18)
casos_Caracoto = c(1,4,8,12,16,20,24)
casos_Juliaca = c(1,2,3,5,8,13,21)
casos_San_Miguel = c(1,3,5,7,9,11,13)
casos_San_Roman = matrix(casos_Cabana, casos_Cabanillas, casos_Caracoto, casos_Juliaca, casos_San_Miguel)
casos_San_Roman = rbind(casos_Cabana, casos_Cabanillas, casos_Caracoto, casos_Juliaca, casos_San_Miguel)
View(casos_San_Roman)
covid = data.frame(id_distrito, distrito, polygono, casos_San_Roman)
View(covid)
modelo = lm(dist ~ speed, data = cars)
View(modelo)
View(modelo)
setClass("Persona", representation(nombre = "character", ano = "numeric"))
Bill = new("Persona", nombre = "Bill", ano = 26)
View(Bill)
# Packages ----
library(shiny)  # Required to run any Shiny app
library(ggplot2)  # For creating pretty plots
library(dplyr)  # For filtering and manipulating data
library(agridat)
install.packages("agridat")
# Packages ----
library(shiny)  # Required to run any Shiny app
library(ggplot2)  # For creating pretty plots
library(dplyr)  # For filtering and manipulating data
library(agridat)
ui <- fluidPage(
titlePanel("Barley Yield"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "gen",  # Give the input a name "genotype"
label = "1. Select genotype",  # Give the input a label to be displayed in the app
choices = c("A" = "a","B" = "b","C" = "c","D" = "d","E" = "e","F" = "f","G" = "g","H" = "h"), selected = "a"),  # Create the choices that can be selected. e.g. Display "A" and link to value "a"
selectInput(inputId = "colour",
label = "2. Select histogram colour",
choices = c("blue","green","red","purple","grey"), selected = "grey"),
sliderInput(inputId = "bin",
label = "3. Select number of histogram bins",
min=1, max=25, value= c(10)),
textInput(inputId = "text",
label = "4. Enter some text to be displayed", "")
),
mainPanel()
)
)
server <- function(input, output) {
output$myhist <- renderPlot(ggplot(Barley, aes(x = yield)) +
geom_histogram(bins = input$bin, fill = input$col, group=input$gen,
data=Barley[Barley$gen == input$gen,],
colour = "black"))
output$mytext <- renderText(input$text)
output$mytable <- renderTable(Barley %>%
filter(gen == input$gen) %>%
summarise("Mean" = mean(yield),
"Median" = median(yield),
"STDEV" = sd(yield),
"Min" = min(yield),
"Max" = max(yield)))
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$plot <- renderPlot(ggplot(Barley, aes(x = yield)) +  # Create object called `output$plot` with a ggplot inside it
geom_histogram(bins = 7,  # Add a histogram to the plot
fill = "grey",  # Make the fill colour grey
data = Barley,  # Use data from `Barley`
colour = "black")  # Outline the bins in black
)
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$plot <- renderPlot(ggplot(Barley, aes(x = yield)) +
geom_histogram(bins = 7,
fill = "grey",
data = Barley[Barley$gen == input$gen,],
colour = "black")
)
}
shinyApp(ui = ui, server = server)
ui <-
fluidPage(
titlePanel("Barley Yield"),
sidebarLayout(
position = "right",
sidebarPanel(h3("Inputs for histogram"),
selectInput("gen", "1. Select genotype", choices = c("A" = "a","B" = "b","C" = "c","D" = "d","E" = "e","F" = "f","G" = "g","H" = "h"), selected = "a"),
br(),
selectInput("col", "2. Select histogram colour", choices = c("blue","green","red","purple","grey"), selected = "grey"),
br(),
sliderInput("bin", "3. Select number of histogram bins", min=1, max=25, value= c(10)),
br(),
textInput("text", "4. Enter some text to be displayed", "")),
mainPanel(
plotOutput("myhist"),
tableOutput("mytable"),
textOutput("mytext")
)
)
)
server <- function(input, output) {
output$plot <- renderPlot(ggplot(Barley, aes(x = yield)) +
geom_histogram(bins = 7,
fill = "grey",
data = Barley[Barley$gen == input$gen,],
colour = "black")
)
}
shinyApp(ui = ui, server = server)
library(shiny)
library(datasets)
library(ggplot2) # load ggplot
# Define server logic required to plot various variables against mpg
shinyServer(function(input, output) {
# Compute the forumla text in a reactive function since it is
# shared by the output$caption and output$mpgPlot functions
formulaText <- reactive(function() {
paste("mpg ~", input$variable)
})
# Return the formula text for printing as a caption
output$caption <- reactiveText(function() {
formulaText()
})
# Generate a plot of the requested variable against mpg and only
# include outliers if requested
# ggplot version
output$mpgPlot <- reactivePlot(function() {
# check for the input variable
if (input$variable == "am") {
# am
mpgData <- data.frame(mpg = mtcars$mpg, var = factor(mtcars[[input$variable]], labels = c("Automatic", "Manual")))
}
else {
# cyl and gear
mpgData <- data.frame(mpg = mtcars$mpg, var = factor(mtcars[[input$variable]]))
}
p <- ggplot(mpgData, aes(var, mpg)) +
geom_boxplot(outlier.size = ifelse(input$outliers, 2, NA)) +
xlab(input$variable)
print(p)
})
})
# Movimiento browniano
set.seed(2)
# Grid
t <- seq(0, 1, by = 0.001)
p <- length(t) - 1
# 5 trayectorias
n <- 5
I <- matrix(rnorm(n * p, 0, 1 / sqrt(p)), n, p)
# Data frame
df1 <- data.frame(apply(I, 1, cumsum))
# install.packages("reshape")
library(reshape)
df <- data.frame(x = seq_along(df1[, 1]),
df1)
# Formato long
df <- melt(df, id.vars = "x")
install.packages("reshape")
# install.packages("reshape")
library(reshape)
df <- data.frame(x = seq_along(df1[, 1]),
df1)
# Formato long
df <- melt(df, id.vars = "x")
library(ggplot2)
# Selección de colores
cols <- c("#D43F3A", "#EEA236", "#5CB85C", "#46B8DA", "#9632B8")
ggplot(df, aes(x = x, y = value, color = variable)) +
geom_line() +
scale_color_manual(values = cols)
View(I)
View(I)
View(df1)
View(df)
View(df1)
View(df)
View(I)
setwd("C:/Users/Bill/Desktop/RStudio tests")
setwd("C:/Users/Bill/Desktop/RStudio tests")
covid <- read.csv("covid.csv", header = TRUE, sep = ",")
View(covid)
View(covid)
covid <- read.csv("covid.csv", header = TRUE, sep = ",")
View(covid)
covid <- read.csv("covid.csv", header = TRUE, sep = ",")
covid <- read.csv("covid.csv", header = TRUE, sep = ",")
View(covid)
library(dplyr)
View(covid)
confirmados = filter(covid, clasificacion == 'CONFIRMADO')
View(confirmados)
confirmados_factor = factor(confirmados$fecha_not)
plot(confirmados_factor)
confirmados_factor = factor(confirmados$semana)
plot(confirmados_factor)
covid <- read.csv("covid.csv", header = TRUE, sep = ",")
library(dplyr)
View(covid)
confirmados = filter(covid, clasificacion = 'CONFIRMADO')
confirmados = filter(covid, clasificacion == 'CONFIRMADO')
View(confirmados)
confirmados_factor = factor(confirmados$num_semana)
plot(confirmados_factor)
confirmados_factor = factor(confirmados$fecha_not)
plot(confirmados_factor)
confirmados_factor = factor(confirmados$num_semana)
plot(confirmados_factor)
covid <- read.csv("covid.csv", header = TRUE, sep = ",")
library(dplyr)
View(covid)
confirmados = filter(covid, clasificacion == 'CONFIRMADO')
confirmados_factor = factor(confirmados$num_semana)
confirmados_factor = factor(confirmados$num_ano)
plot(confirmados_factor)
y = confirmados_factor
x = 1:356
library(ggplot2)
ggplot(x = x, y = y) + geom_line()
plot(y)
