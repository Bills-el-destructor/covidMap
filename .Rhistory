datos = airquality
plot(datos)
hist(datos$Ozone)
View(datos)
View(datos)
viento = datos$Wind
viento = round(viento, 0)
viento_factor = factor(viento)
levels(viento_factor)
plot(viento_factor)
nombre = c("Shrek", "Shrek 2", "Shrek tercero", "Shrek Felices por siempre")
puntuacion = c(7.9, 7.2, 6.1, 6.3)
posterior_2005 = c(FALSE, FALSE, TRUE, TRUE)
peliculas_df = data.frame(nombre,
puntuacion,
posterior_2005)
View(peliculas_df)
View(peliculas_df)
names(peliculas_df) = ("NOMBRE",
"PUNTUACION",
"POSTERIOR_2005")
names(peliculas_df) = ('NOMBRE',
'PUNTUACION',
'POSTERIOR_2005')
peliculas_df
names(peliculas_df) = c('NOMBRE',
'PUNTUACION',
'POSTERIOR_2005')
names(peliculas_df) = c("NOMBRE",
"PUNTUACION",
"POSTERIOR_2005")
View(peliculas_df)
View(peliculas_df)
View(peliculas_df)
View(peliculas_df)
orden_mayor_menor = order(peliculas_df$PUNTUACION,
ordered = TRUE)
orden_mayor_menor = order(peliculas_df$PUNTUACION,
decreasing = TRUE)
df_ordenado = peliculas_df[orden_mayor_menor]
df_ordenado = peliculas_df[orden_mayor_menor,]
peliculas_df[orden_mayor_menor,]
df_ordenado = peliculas_df[orden_mayor_menor,]
View(peliculas_df)
View(peliculas_df)
View(df_ordenado)
View(df_ordenado)
View(peliculas_df)
View(peliculas_df)
View(df_ordenado)
View(peliculas_df)
View(df_ordenado)
View(peliculas_df)
View(df_ordenado)
View(peliculas_df)
View(df_ordenado)
View(peliculas_df)
View(df_ordenado)
View(peliculas_df)
View(peliculas_df)
View(peliculas_df)
View(peliculas_df)
View(peliculas_df)
View(peliculas_df)
View(df_ordenado)
View(df_ordenado)
View(df_ordenado)
View(peliculas_df)
View(peliculas_df)
hist(df_ordenado)
hist(df_ordenado$PUNTUACION)
df_ordenado[,1]
df_ordenado[1,]
nombre = c("Shrek", "Shrek 2", "Shrek tercero", "Shrek Felices por siempre")
puntuacion = c(7.9, 7.2, 6.1, 6.3)
posterior_2005 = c(FALSE, FALSE, TRUE, TRUE)
peliculas_df = data.frame(nombre,
puntuacion,
posterior_2005)
names(peliculas_df) = c("NOMBRE",
"PUNTUACION",
"POSTERIOR_2005")
orden_mayor_menor = order(peliculas_df$PUNTUACION,
decreasing = TRUE)
df_ordenado = peliculas_df[orden_mayor_menor,]
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
nombre = c("Shrek", "Shrek 2", "Shrek tercero", "Shrek Felices por siempre")
puntuacion = c(7.9, 7.2, 6.1, 6.3)
posterior_2005 = c(FALSE, FALSE, TRUE, TRUE)
peliculas_df = data.frame(nombre,
puntuacion,
posterior_2005)
names(peliculas_df) = c("NOMBRE",
"PUNTUACION",
"POSTERIOR_2005")
orden_mayor_menor = order(peliculas_df$PUNTUACION,
decreasing = TRUE)
df_ordenado = peliculas_df[orden_mayor_menor,]
source("~/.active-rstudio-document")
plot(df_ordenado)
df_ordenado = peliculas_df[orden_mayor_menor,]
df_ordenado = peliculas_df[orden_mayor_menor,]
print("Hola R")
df_ordenado = peliculas_df[orden_mayor_menor,]
peliculas_df -> data.frame(nombre,
puntuacion,
posterior_2005)
names(peliculas_df) = c("NOMBRE",
"PUNTUACION",
"POSTERIOR_2005")
df_ordenado = peliculas_df[orden_mayor_menor,]
df_ordenado = peliculas_df[orden_mayor_menor,]
df_ordenado = peliculas_df[orden_mayor_menor,]
df_ordenado = peliculas_df[orden_mayor_menor,]
df_ordenado = peliculas_df[orden_mayor_menor,]
posterior_2005 = c(FALSE, FALSE, TRUE, TRUE)
peliculas_df = data.frame(nombre,
puntuacion,
posterior_2005)
names(peliculas_df) = c("NOMBRE",
"PUNTUACION",
"POSTERIOR_2005")
nombre = c("Shrek", "Shrek 2", "Shrek tercero", "Shrek Felices por siempre")
puntuacion = c(7.9, 7.2, 6.1, 6.3)
peliculas_df = data.frame(nombre,
puntuacion,
posterior_2005)
names(peliculas_df) = c("NOMBRE",
"PUNTUACION",
"POSTERIOR_2005")
orden_mayor_menor = order(peliculas_df$PUNTUACION,
decreasing = TRUE)
df_ordenado = peliculas_df[orden_mayor_menor,]
nombre = c("Shrek", "Shrek 2", "Shrek tercero", "Shrek Felices por siempre")
puntuacion = c(7.9, 7.2, 6.1, 6.3)
posterior_2005 = c(FALSE, FALSE, TRUE, TRUE)
peliculas_df = data.frame(nombre,
puntuacion,
posterior_2005)
names(peliculas_df) = c("NOMBRE",
"PUNTUACION",
"POSTERIOR_2005")
orden_mayor_menor = order(peliculas_df$PUNTUACION,
decreasing = TRUE)
df_ordenado = peliculas_df[orden_mayor_menor,]
nombre = c("Shrek", "Shrek 2", "Shrek tercero", "Shrek Felices por siempre")
puntuacion = c(7.9, 7.2, 6.1, 6.3)
posterior_2005 = c(FALSE, FALSE, TRUE, TRUE)
peliculas_df = data.frame(nombre,
puntuacion,
posterior_2005)
names(peliculas_df) = c("NOMBRE",
"PUNTUACION",
"POSTERIOR_2005")
orden_mayor_menor = order(peliculas_df$PUNTUACION,
decreasing = TRUE)
df_ordenado = peliculas_df[orden_mayor_menor,]
plot(df_ordenado)
source("~/.active-rstudio-document", encoding = 'UTF-8')
print("Hola RStudio");
print("Inrgeses radio: ")
radio = scan()
radio = readline(prompt = "Ingrese radio: ")
print(pi)
radio = readline(prompt = "Ingrese radio: ")
print(pi*radio*radio*altura)
radio = readline(prompt = "Ingrese radio: ")
altura = readline(prompt = "Ingrese altura: ")
print(pi*radio*radio*altura)
print(radio*radio*altura)
radio = as.integer(readline(prompt = "Ingrese radio: "))
10
altura = as.integer(readline(prompt = "Ingrese altura: "))
print(pi*radio*radio*altura)
10
radio = as.integer(readline(prompt = "Ingrese radio: "))
altura = as.integer(readline(prompt = "Ingrese altura: "))
print(pi*radio*radio*altura)
print("El volumen del cilindro es: ", pi*radio*radio*altura)
print("El volumen del cilindro es: "+ pi*radio*radio*altura)
print("El volumen del cilindro es: "+ pi*radio*radio*altura)
print("El volumen del cilindro es: ", pi*radio*radio*altura)
print("El volumen del cilindro es: "+ pi*radio*radio*altura)
cat("El volumen del cilindro es: ", pi*radio*radio*altura)
source("~/.active-rstudio-document")
source("C:/Users/Bill/Desktop/RStudio tests/2 Volumen de un cilindro.R")
source("~/.active-rstudio-document")
cat("El precio promedio es: " + (precio1+precio2+precio3))
cat("El precio promedio es: ", (precio1+precio2+precio3))
cat("El precio promedio es: ", (precio1+precio2+precio3)/3)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("C:/Users/Bill/Desktop/RStudio tests/3 Precio promedio.R")
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("C:/Users/Bill/Desktop/RStudio tests/4 Vectores.R", encoding = 'UTF-8')
source("C:/Users/Bill/Desktop/RStudio tests/4 Vectores.R", encoding = 'UTF-8')
a()
array = c()
array
array = c(array, 1)
array = c(array, 2)
array = c(array, 3)
array = c(array, 4)
array = c(array, 5)
array = c(array, 6)
array = c(array, 7)
array = c(array, 8)
array = c(array, 9)
array = c(array, 10)
source("C:/Users/Bill/Desktop/RStudio tests/4 Vectores.R", encoding = 'UTF-8')
source("C:/Users/Bill/Desktop/RStudio tests/4 Vectores.R", encoding = 'UTF-8')
sin(1)
sin(0)
sin(pi)
sin(45)
sin(0)
sin(90)
sin(180)
sin(pi)
sin(pi/2)
sin(3*pi/2)
sin(0*pi/180)
sin(90*pi/180)
tan(90*pi/180)
sin(45*pi/180)
0.7071068*2
x
source("~/.active-rstudio-document", encoding = 'UTF-8')
x
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
source("~/.active-rstudio-document", encoding = 'UTF-8')
install.packages("ggplot2")
help(ggplot2)
help("ggplot2")
library(ggplot2)
help("ggplot2")
install.packages("leaflet")
source("~/.active-rstudio-document")
m = leaflet() %>%
addTiles()
View(m)
View(m)
View(m)
View(m)
m
library(ggplot2)
ggplot(mpg, aes(displ, hwy)) + geom_point()
mpg
datos = mpg
View(datos)
View(datos)
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
library(ggplot2)
library(plotly)
library(plotly)
install.packages(c("cli", "colorspace", "crayon", "fansi", "glue", "magrittr", "pillar", "rlang", "withr"))
install.packages(c("cli", "colorspace", "crayon", "fansi", "glue", "magrittr", "pillar", "rlang", "withr"))
install.packages(c("cli", "colorspace", "crayon", "fansi", "glue", "magrittr", "pillar", "rlang", "withr"))
install.packages(c("cli", "colorspace", "crayon", "fansi", "glue", "magrittr", "pillar", "rlang", "withr"))
install.packages(c("cli", "colorspace", "crayon", "fansi", "glue", "magrittr", "pillar", "rlang", "withr"))
install.packages(c("cli", "colorspace", "crayon", "fansi", "glue", "magrittr", "pillar", "rlang", "withr"))
install.packages("plotly")
library(ggplot2)
library(plotly)
r version
r -version
r -v
library(plotly)
remove.packages(plotly)
remove.packages("plotly")
install.packages("plotly")
library(plotly)
install.packages("rlang")
install.packages("rlang")
remove.packages("plotly")
install.packages("plotly")
remove.packages("plotly")
r -version
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
library(shiny)
ui = fluidPage(
plotOutput("plot", click = "plot_click"),
tableOutput("data")
)
server = function(input, output)
{
output$plot = renderPlot({
plot(mtcars$wt, mtcars$mpg)},
res = 96)
output$data = renderTable({
nearPoints(mtcars, input$plot_click, xvar = "wt", yvar = "mpg")}
)
}
shinyApp(ui = ui, server = server)
setwd("C:/Users/Bill/Desktop/RStudio tests")
library(sf)
library(raster)
library(dplyr)
library(spData)
library(tmap)
library(leaflet)
library(ggplot2)
library(tmap)
library(sf)
library(extrafont)
myshp = st_read("PUNO/PROVINCIAS_PUNO.shp")
tm_shape(myshp) + tm_polygons()
tm_shape(myshp) +
tmap_options(inner.margins = c(0.1, 0.1, 0.02, 0.01)) +
tm_fill('PROVINCIA', #tm_fill = rellena de colores el mapa y la paleta
title = '',
palette = c("yellow", "red"), # "OrRd" "Blues" "Greys" "RdYlGn" c("red", "white")
style = 'quantile') +
tm_layout(frame = T, frame.double.line = T,
main.title = 'Mapa Covid 19 Puno 2020 - 2021', #main.title = Todo respecto al titutlo general
main.title.size = 1,
fontface = 2,
fontfamily = 'Times New Roman',
main.title.position = c(0.12, 0.5)) +
tm_borders(col = "black", lwd = 1, lty = "solid", alpha = 0.25) +
tm_text('PROVINCIA', size = 0.5, fontface = 2, fontfamily = 'Tw Cen MT Condensed') + #tm_text = nombres de los distritos
#tm_shape(myshp) +
#tm_text("IDDIST", size = 0.4, fontface = 2, fontfamily = 'Tw Cen MT Condensed', auto.placement = 0.05) +
tm_compass(type = "8star", position = c(0.7, 0.35)) +
tm_credits("Autor: Bill", fontface = "italic", align = "right")
tm_shape(myshp) +
tmap_options(inner.margins = c(0.1, 0.1, 0.02, 0.01)) +
tm_fill('PROVINCIA', #tm_fill = rellena de colores el mapa y la paleta
title = '',
palette = c("OrRd", "red"), # "OrRd" "Blues" "Greys" "RdYlGn" c("red", "white")
style = 'quantile') +
tm_layout(frame = T, frame.double.line = T,
main.title = 'Mapa Covid 19 Puno 2020 - 2021', #main.title = Todo respecto al titutlo general
main.title.size = 1,
fontface = 2,
fontfamily = 'Times New Roman',
main.title.position = c(0.12, 0.5)) +
tm_borders(col = "black", lwd = 1, lty = "solid", alpha = 0.25) +
tm_text('PROVINCIA', size = 0.5, fontface = 2, fontfamily = 'Tw Cen MT Condensed') + #tm_text = nombres de los distritos
#tm_shape(myshp) +
#tm_text("IDDIST", size = 0.4, fontface = 2, fontfamily = 'Tw Cen MT Condensed', auto.placement = 0.05) +
tm_compass(type = "8star", position = c(0.7, 0.35)) +
tm_credits("Autor: Bill", fontface = "italic", align = "right")
tm_shape(myshp) +
tmap_options(inner.margins = c(0.1, 0.1, 0.02, 0.01)) +
tm_fill('PROVINCIA', #tm_fill = rellena de colores el mapa y la paleta
title = '',
palette = c("yellow", "garnet"), # "OrRd" "Blues" "Greys" "RdYlGn" c("red", "white")
style = 'quantile') +
tm_layout(frame = T, frame.double.line = T,
main.title = 'Mapa Covid 19 Puno 2020 - 2021', #main.title = Todo respecto al titutlo general
main.title.size = 1,
fontface = 2,
fontfamily = 'Times New Roman',
main.title.position = c(0.12, 0.5)) +
tm_borders(col = "black", lwd = 1, lty = "solid", alpha = 0.25) +
tm_text('PROVINCIA', size = 0.5, fontface = 2, fontfamily = 'Tw Cen MT Condensed') + #tm_text = nombres de los distritos
#tm_shape(myshp) +
#tm_text("IDDIST", size = 0.4, fontface = 2, fontfamily = 'Tw Cen MT Condensed', auto.placement = 0.05) +
tm_compass(type = "8star", position = c(0.7, 0.35)) +
tm_credits("Autor: Bill", fontface = "italic", align = "right")
if (require("shiny")) {
data(World)
world_vars <- setdiff(names(World), c("iso_a3", "name", "sovereignt", "geometry"))
ui <- fluidPage(
tmapOutput("map"),
selectInput("var", "Variable", world_vars)
)
server <- function(input, output, session) {
output$map <- renderTmap({
tm_shape(World) +
tm_polygons(world_vars[1], zindex = 401)
})
observe({
var <- input$var
tmapProxy("map", session, {
tm_remove_layer(401) +
tm_shape(World) +
tm_polygons(var, zindex = 401)
})
})
}
app <- shinyApp(ui, server)
if (interactive()) app
}
View(World)
